<?xml version="1.0" encoding="utf-8"?>
<containers:HelpTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
							xmlns:containers="com.borhan.containers.*"
							xmlns:view="com.borhan.bmc.modules.create.view.*"
							width="550" height="400" layout="vertical"
							showCloseButton="true" close="closeHandler(event)"
							showHelpButton="true" help="helpHandler(event)"
							creationComplete="creationCompleteHandler(event)"
							title="{ResourceManager.getInstance().getString('create', 'uploadSettingTitle')}"
							>
	<mx:Metadata>
		[ResourceBundle("create")]
		[ResourceBundle("common")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.borhan.BorhanClient;
			import com.borhan.commands.MultiRequest;
			import com.borhan.commands.conversionProfile.ConversionProfileList;
			import com.borhan.commands.media.MediaAdd;
			import com.borhan.errors.BorhanError;
			import com.borhan.events.BorhanEvent;
			import com.borhan.bmc.events.BmcHelpEvent;
			import com.borhan.bmc.events.BmcNavigationEvent;
			import com.borhan.bmc.modules.create.MultipleMediaFilesSelector;
			import com.borhan.bmc.modules.create.vo.UploadFile;
			import com.borhan.managers.FileUploadManager;
			import com.borhan.types.BorhanConversionProfileType;
			import com.borhan.types.BorhanMediaType;
			import com.borhan.vo.FileUploadVO;
			import com.borhan.vo.BorhanConversionProfile;
			import com.borhan.vo.BorhanConversionProfileFilter;
			import com.borhan.vo.BorhanConversionProfileListResponse;
			import com.borhan.vo.BorhanFilterPager;
			import com.borhan.vo.BorhanMediaEntry;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			
			
			public var client:BorhanClient;
			
			
			[Bindable]
			/**
			 * list of available conversion profiles 
			 * <code>BorhanConversionProfile</code> objects
			 * */
			private var _conversionProfiles:ArrayCollection;
			
			
			
			[Bindable][ArrayElementType("UploadFile")]
			private var _files:ArrayCollection;
			
			
			/**
			 * XMLList that describes the filters that has to be shown for file selection
			 * */
			public var filterDefinitions:XMLList;
			
			/**
			 * files to be uploaded 
			 * */
			public function uploadFiles(value:Array, addToExisting:Boolean=false):void {
				var ar:Array = new Array();
				var uf:UploadFile;
				for each (var fr:FileReference in value) {
					uf = new UploadFile();
					uf.fr = fr;
					uf.mediaType = getFileMediaType(fr);
					uf.fileName = removeFileExt(fr.name);
					ar.push(uf);
				}
				if (addToExisting) {
					_files.addAll(new ArrayCollection(ar));
				}
				else {
					_files = new ArrayCollection(ar);
				}
			}
			
			/**
			 * remove file extension from the given string, if exists
			 * @param str	the string to truncate
			 * @return 	truncated string
			 * */
			private function removeFileExt(str:String):String {
				var ind:int = str.lastIndexOf(".");
				if (ind > 0) {
					return str.substring(0, ind);
				}
				else {
					return str;
				}
			}
			
			/**
			 * get media type according to file extension
			 * @param fr	the queried file
			 * @return matching BorhanMediaType enum value, or -1 if no match found
			 * */
			private function getFileMediaType(fr:FileReference):int {
				var dot:int = fr.name.lastIndexOf(".");
				var ext:String = fr.name.substring(dot + 1).toLowerCase();
				var str:String;
				var types:Array = getTypesInFilter(filterDefinitions.(@name=="video_files")[0].@ext);
				for each (str in types) {
					if (str == ext) {
						return BorhanMediaType.VIDEO;
					}
				}
				types = getTypesInFilter(filterDefinitions.(@name=="audio_files")[0].@ext);
				for each (str in types) {
					if (str == ext) {
						return BorhanMediaType.AUDIO;
					}
				}
				types = getTypesInFilter(filterDefinitions.(@name=="image_files")[0].@ext);
				for each (str in types) {
					if (str == ext) {
						return BorhanMediaType.IMAGE;
					}
				}
				return -1;
			}
			
			
			/**
			 * get a list of file extensions that are used in the filter
			 * @param ext	string passed to file filter ("*.jpg;*.jpeg;*.gif;*.png")
			 * @return array with file extensions
			 * */
			private function getTypesInFilter(ext:String):Array {
				var cleanString:String = ext.replace(/\*\./g, "");
				var result:Array = cleanString.split(";");
				return result;
			}

			
			private function creationCompleteHandler(event:FlexEvent):void {
				submitBtn.enabled = false;
				listConversionProfiels();
			}
			
			private function listConversionProfiels():void {
				var f:BorhanConversionProfileFilter = new BorhanConversionProfileFilter();
				f.typeEqual = BorhanConversionProfileType.MEDIA;
				var p:BorhanFilterPager = new BorhanFilterPager();
				p.pageSize = 500;	// very large number that should cover all profiles
				var cpl:ConversionProfileList = new ConversionProfileList(f, p);
				cpl.addEventListener(BorhanEvent.COMPLETE, conversionProfilesHandler);
				cpl.addEventListener(BorhanEvent.FAILED, conversionProfilesHandler);
				client.post(cpl);
			}
			
			private function conversionProfilesHandler(e:BorhanEvent):void {
				if (e.type == BorhanEvent.FAILED) {
					showError(e.error.errorMsg);
				}
				else {
					var resp:Array = (e.data as BorhanConversionProfileListResponse).objects;
					var ar:Array = new Array();
					var def:BorhanConversionProfile;
					for each (var o:Object in resp) {
						if (o is BorhanConversionProfile) {
							if ((o as BorhanConversionProfile).isDefault) {
								def = o as BorhanConversionProfile;
							}
							else {
								ar.push(o as BorhanConversionProfile);
							}
						}
					}
					if (def) {
						ar.unshift(def);
					}
					_conversionProfiles = new ArrayCollection(ar);
				}
				submitBtn.enabled = true;
			}
			
			protected function showError(str:String):void {
				Alert.show(str, resourceManager.getString('common', 'error'));
			}
			
			
			/**
			 * open the file browser 
			 * */
			protected function addMoreFiles():void {
				var neu:MultipleMediaFilesSelector = new MultipleMediaFilesSelector(filterDefinitions);
				neu.addEventListener(MultipleMediaFilesSelector.FILES_SELECTED, addFilesToList);
				neu.doFileUpload();
			}
			
			
			/**
			 * adds selected files to the upload files list 
			 * */
			protected function addFilesToList(e:Event):void {
				e.target.removeEventListener(MultipleMediaFilesSelector.FILES_SELECTED, addFilesToList);
				uploadFiles((e.target as MultipleMediaFilesSelector).getFiles(), true);
			}

			private function getUploadLimit():Number {
				return Application.application.parameters.maxUploadSize;
			}
			
			/**
			 * if file size of any file exceeds partner limit, return false
			 * */
			protected function validateFileSize():Boolean {
				var result:Boolean = true;
				var bytesInMega:int = 1024*1024;
				var maxSize:Number = getUploadLimit();
				for each (var file:UploadFile in _files) {
					try {
						// try to access size attribute to see if it is more than a uint
						if ((file.fr.size/bytesInMega) > maxSize) {
							result = false;
							break;
						}
					}
					catch (e:Error) {
						// if it was more than a uint, it is too large.
						result = false;
						break;
					}
				}
				return result;
			}
			
			
			/**
			 * if file type is unknown (translated to media type), return false
			 * */
			protected function validateFileType():Boolean {
				var result:Boolean = true;
				var maxSize:Number = getUploadLimit();
				for each (var file:UploadFile in _files) {
					if (file.mediaType == -1) {
						result = false;
						break;
					}
				}
				return result;
			}

			/**
			 * create new media entries, then pass FRs to the upload  
			 * manager to upload them as source for these entries.
			 * */
			protected function submit(event:MouseEvent):void {
				
				if (!validateFileSize()) {
					Alert.show(ResourceManager.getInstance().getString('common', 'filesTooBig', [getUploadLimit()]), 
						ResourceManager.getInstance().getString('common', 'error'));
					return;
				}
				
				if (!validateFileType()) {
					Alert.show(ResourceManager.getInstance().getString('create', 'unknown_media_type'), 
						ResourceManager.getInstance().getString('common', 'error'));
					return;
				}
				
				
				CursorManager.setBusyCursor();
				submitBtn.enabled = false;
				var mr:MultiRequest = new MultiRequest();
				var ma:MediaAdd;
				var kme:BorhanMediaEntry;
				
				for each (var file:UploadFile in _files) {
					kme = new BorhanMediaEntry();
					kme.name = file.fileName;
					kme.mediaType = file.mediaType;
					kme.conversionProfileId = cnvrtProfCb.selectedItem.id;
					
					ma = new MediaAdd(kme);
					mr.addAction(ma);
				}
				mr.addEventListener(BorhanEvent.COMPLETE, addMediaToEntries);
				mr.addEventListener(BorhanEvent.FAILED, addMediaToEntries);
				client.post(mr);
			}
			
			
			/**
			 * add media files to the newly created entries
			 * @param e	the event dispatched by the entries creation call
			 * */
			protected function addMediaToEntries(e:BorhanEvent):void {
				e.target.removeEventListener(BorhanEvent.COMPLETE, addMediaToEntries);
				e.target.removeEventListener(BorhanEvent.FAILED, addMediaToEntries);
				CursorManager.removeBusyCursor();
				if (e.type == BorhanEvent.FAILED) {
					showError(e.error.errorMsg);
					return;
				}
				else {
					// internal errors
					for each (var o:Object in e.data) {
						if (o is BorhanError) {
							showError(o.errorMsg);
							return;
						}
						else if (o.error) {
							// in MRs, errors are not BorhanErrors.
							showError(o.error.message);
							return;
						}
					}
					// pass FRs to upload manager
					// we assume an entry for each file, in matching order
					var uploader:FileUploadManager = FileUploadManager.getInstance();
					var entry:BorhanMediaEntry;
					var entries:Array = e.data as Array;
					var fu:UploadFile;		// local vo
					var fuv:FileUploadVO;	// uploader vo
					for (var i:int = 0; i< entries.length; i++) {
						entry = entries[i];
						fu = _files[i];
						fuv = uploader.createFuv(entry.id, entry.mediaType, fu.fr, "0");	// always use source, but assuming source is always 0 is ugly :)
						uploader.updateEntryContent(entry.id, [fuv]);
					}
					// dispatch navigation event
					dispatchEvent(new BmcNavigationEvent(BmcNavigationEvent.NAVIGATE, "content"));
					// remove popup
					closeHandler(null);
				}
			}


			protected function closeHandler(event:CloseEvent):void {
				PopUpManager.removePopUp(this);
			}


			protected function helpHandler(event:Event):void {
				dispatchEvent(new BmcHelpEvent(BmcHelpEvent.HELP, 'section_desktop_upload'));
			}

		]]>
	</mx:Script>
	
	<mx:HBox verticalAlign="middle" >
		<mx:Label text="{resourceManager.getString('create', 'convProfLbl')}:" 
				  styleName="simpleBoldText"/>
		<mx:ComboBox id="cnvrtProfCb" dataProvider="{_conversionProfiles}" 
					 selectedIndex="0" labelField="name" maxWidth="406"/>
	</mx:HBox>
	<mx:Spacer height="12" />
	<view:FilesTable id="filesTable" width="100%" dataProvider="{_files}" addFiles="addMoreFiles()"/>
	<mx:ControlBar>
		<mx:Button id="submitBtn" click="submit(event)" buttonMode="true"
				   enabled="{_files.length > 0}"
				   label="{resourceManager.getString('create', 'submitUploadLabel')}"/>
	</mx:ControlBar>
</containers:HelpTitleWindow>
