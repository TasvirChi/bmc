<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()" show="onShow()" hide="onHide()"
		 xmlns:view="com.borhan.bmc.modules.analytics.view.*" xmlns:map="com.borhan.bmc.modules.analytics.view.map.*"
		 xmlns:charts="com.borhan.bmc.modules.analytics.view.charts.*" xmlns:controls="com.borhan.controls.*"
		 xmlns:aggregateBar="com.borhan.bmc.modules.analytics.view.aggregateBar.*">

	<mx:Script>
		<![CDATA[
			import com.borhan.bmc.business.JSGate;
			import com.borhan.bmc.events.BmcHelpEvent;
			import com.borhan.bmc.modules.analytics.business.IDateRangeManager;
			import com.borhan.bmc.modules.analytics.control.PageEvent;
			import com.borhan.bmc.modules.analytics.control.ReportDataEvent;
			import com.borhan.bmc.modules.analytics.control.ReportEvent;
			import com.borhan.bmc.modules.analytics.control.StateEvent;
			import com.borhan.bmc.modules.analytics.model.AnalyticsModelLocator;
			import com.borhan.bmc.modules.analytics.model.Context;
			import com.borhan.bmc.modules.analytics.model.reportdata.ReportData;
			import com.borhan.bmc.modules.analytics.utils.TimeConsts;
			import com.borhan.bmc.modules.analytics.view.window.PreviewEntryWin;
			import com.borhan.bmc.modules.analytics.vo.FilterVo;
			import com.borhan.types.BorhanReportInterval;
			import com.borhan.types.BorhanReportType;
			import com.borhan.vo.BorhanBaseEntry;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.SWFLoader;
			import mx.formatters.NumberFormatter;
			import mx.managers.PopUpManager;


			private static const TABLE_ROW_HEIGHT:int = 27;


			/**
			 * player used in "old" report's entry section
			 * */
			public static var bdp:SWFLoader;


			/**
			 * entry preview window for new reports
			 * */
			public static var pew:PreviewEntryWin;


			/**
			 * parameters required for BDP functionality and load
			 * */
			public var bdpParams:Context;

			[Bindable]
			/**
			 * columns to show in table
			 * */
			public var tableHeaders:Array;

			[Bindable]
			/**
			 * columns by which the table cannot be sorted
			 * */
			public var tableNonSortableHeaders:Array;

			[Bindable]
			/**
			 * headers of "totals" component
			 * */
			public var aggregatedHeaders:Array;

			[Bindable]
			/**
			 * list of optional graph dimensions
			 * */
			public var dimCbDp:Array;

			[Bindable]
			/**
			 * current report's data
			 * */
			public var reportData:ReportData;

			[Bindable]
			/**
			 * report type
			 * @see com.borhan.types.BorhanReportType
			 * */
			public var reportType:String;

			/**
			 * screen type
			 * @see com.borhan.bmc.modules.analytics.model.types.ScreenTypes
			 * */
			public var screenType:int;

			/**
			 * in drilldown reports, the type of screen that is the "parent" of this screen.
			 * not used in non-drilldown reports.
			 * */
			public var backScreenType:int;

			/**
			 * help anchor
			 * */
			public var helpUrl:String = "reportAndAnalyticsSection4";

			// SHOW & HIDE FLAGS
			[Bindable]
			/**
			 * show hours as well as dates in Graph's X axis labels  
			 * */
			public var showGraphHours:Boolean = false;
			
			[Bindable]
			/**
			 * default: true
			 * */
			public var showLineChart:Boolean = true;

			[Bindable]
			/**
			 * default: false
			 * */
			public var showColumnChart:Boolean = false;


			[Bindable]
			/**
			 * default: true
			 * */
			public var showDimension:Boolean = true;

			[Bindable]
			/**
			 * default: true
			 * */
			public var showTable:Boolean = true;

			[Bindable]
			/**
			 * default: false
			 * */
			public var showBDP:Boolean = false;

			[Bindable]
			/**
			 * tooltip for report message button.
			 * if no value set, the button doesn't appear.
			 * */
			public var messageTip:String = '';

			[Bindable]
			/**
			 * Show or Hide the user filter UI <br>
			 * default: true
			 * */
			public var showUsersFilter:Boolean = true;

			[Bindable]
			/**
			 * Show or Hide the application filter UI <br>
			 * default: true
			 * */
			public var showApplicationsFilter:Boolean = true;

			[Bindable]
			/**
			 * show navigation between drilldown reports in the filter <br>
			 * default:false
			 * */
			public var showDrillDownNav:Boolean = false;
			
			[Bindable]
			/**
			 * in filter, show only dates <br>
			 * default:false
			 * */
			public var dateOnlyFlag:Boolean = false;
			
			[Bindable]
			/**
			 * in filter, set texts to playbackContext related <br>
			 * default:false
			 * */
			public var playbackContextFlag:Boolean = false;
			
			/**
			 * default: false
			 * */
			public var addGraphTotals:Boolean = false;
			
			/**
			 * default: false
			 * */
			public var addTableTotals:Boolean = false;
			
			[Bindable]
			/**
			 * remove paging component (for reports which don't support paging) <br>
			 * default: false
			 * */
			public var disablePager:Boolean = false;


			// LOAD FLAGS
			[Bindable]
			private var _isLoading:Boolean = false;

			/**
			 * loading flag
			 * */
			public function set isLoading(value:Boolean):void {
				_isLoading = value;
			}

			[Bindable]
			private var _loadChart:Boolean = false;

			public function set loadChart(value:Boolean):void {
				_loadChart = value;
				_isVisibleLineChart = !value && showLineChart;
				_isVisibleColumnChart = !value && showColumnChart;
			}

			[Bindable]
			private var _loadTotal:Boolean = false;

			public function set loadTotal(value:Boolean):void {
				_loadTotal = value;
			}

			[Bindable]
			private var _loadTable:Boolean = false;

			public function set loadTable(value:Boolean):void {
				_loadTable = value;
			}

			[Bindable]
			private var _loadEntry:Boolean = false;

			public function set loadEntry(value:Boolean):void {
				_loadEntry = value;
				_isVisibleEntry = !value && showBDP
			}

			// VISIBLE FLAGS
			[Bindable]
			private var _isVisibleLineChart:Boolean = false;
			
			[Bindable]
			private var _isVisibleColumnChart:Boolean = false;
			
			[Bindable]
			private var _isVisibleEntry:Boolean = false;

			/**
			 * work around: in some cases onshow is triggered twice
			 * */
			private var _showFlag:Boolean = false;

			
			/**
			 * see if the current entry has changed
			 * */
			private var _entryChangeWatcher:ChangeWatcher;
			
			
			[Bindable]
			/**
			 * is this report a drilldown-report <br>
			 * default:false
			 * */
			public var isDrillDown:Boolean = false;


			[Bindable]
			/**
			 * filtering data
			 * */
			public var filterVo:FilterVo;

			
			[Bindable]
			/**
			 * manager for dates ranges in filter
			 * */
			public var dateRanger:IDateRangeManager;

			
			[Bindable]
			/**
			 * initial table ordering
			 * */
			public var tableOrderBy:String;

			
			[Bindable]
			/**
			 * default:false
			 * */
			public var showTimeUnits:Boolean = false;

			
			[Bindable]
			/**
			 * default:true
			 * */
			public var showSearchFilter:Boolean = true;

			
			[Bindable]
			/**
			 * report time interval is months
			 * */
			private var _isMonths:Boolean = false;

			[Bindable]
			/**
			 * data currently shown is for a time interval of upto one day
			 * */
			private var _isOneDay:Boolean = false;

			[Bindable]
			private var _model:AnalyticsModelLocator = AnalyticsModelLocator.getInstance();


			private function init():void {
				BindingUtils.bindSetter(onReportDataChange, this, "reportData");
				BindingUtils.bindSetter(onFilterChanged, this, "filterVo");

				if (dimCbDp == _model.reportDimension.endUserStorage || dimCbDp == _model.reportDimension.publisherStorageNBandwidth) {
					dateBarChart.dataFormatFunc = roundUpValue;
					lineChart.dataFormatFunc = roundUpValue;
				}
			}


			/**
			 * For table data tips
			 * */
			private function roundUpValue(value:Object):String {
				var formatter:NumberFormatter = new NumberFormatter();
				formatter.thousandsSeparatorTo = ",";
				return formatter.format(Math.ceil(Number(value)));
			}


			private function onFilterChanged(vo:FilterVo):void {
				handleTimeUnitChange();
			}

			private function isOneDay(fromDate:Date, toDate:Date):Boolean {
				if (fromDate.date != toDate.date) {
					return false;
				}
				if (fromDate.month != toDate.month) {
					return false;
				}
				if (fromDate.fullYear != toDate.fullYear) {
					return false;
				}
				return true;
			}

			/**
			 * recalculate _isMonths/_isOneDay and change table headers
			 * */
			private function handleTimeUnitChange():void {
				if (showTimeUnits) {
					_isMonths = filterVo.interval == BorhanReportInterval.MONTHS;
				}
				else {
					_isMonths = false;
				}
				_isOneDay = isOneDay(filterVo.fromDate, filterVo.toDate);
				// QC 3885 - Changing from "Date" to "Month" in the table headers.
				if (tableHeaders && tableHeaders.length > 1) {
					if (_isMonths && tableHeaders[0] == "date_id") {
						tableHeaders[0] = "month_id";
					}
					else if (!_isMonths && tableHeaders[0] == "month_id") {
						tableHeaders[0] = "date_id";
					}
				}
				ktable.headerDataProvider = tableHeaders;
			}


			/**
			 * show BDP if required
			 * */
			private function onSelectedMediaEntryChange(selectdEntry:BorhanBaseEntry):void {
				if (reportData && reportData.selectedMediaEntry && reportData.selectedMediaEntry.id) {
					if (showBDP) {
						addBDP();
					}
				}
			}


			/**
			 * triggered when tab is shown.
			 * */
			public function onShow():void {
				// work around that in some case the show called twice
				if (_showFlag)
					return;

				_showFlag = true;
				_entryChangeWatcher = BindingUtils.bindSetter(onSelectedMediaEntryChange, this.reportData, "selectedMediaEntry");
				filter.filterVo = filterVo;

				getReports();
			}


			/**
			 * triggered when tab is hidden
			 * */
			public function onHide():void {
				_showFlag = false;
				if (_entryChangeWatcher) {
					_entryChangeWatcher.unwatch();
				}
				// work around to hide the old thumbnail until the bdp is ready
				if (bdp)
					bdp.visible = false;

				// Clean the BDP content if exist
				if (bdp && bdp.content)
					bdp.content["sendNotification"]('cleanMedia');
			}


			private function set3rdLvlSelection():void {
				filter.basicDetails.setStyle('textDecoration', 'underline');
				filter.dropoff.setStyle('textDecoration', 'underline');
				filter.interactions.setStyle('textDecoration', 'underline');
				filter.basicDetails.buttonMode = true;
				filter.dropoff.buttonMode = true;
				filter.interactions.buttonMode = true;

				if (showBDP) {
					if (reportType == BorhanReportType.TOP_CONTENT) {
						filter.basicDetails.setStyle('textDecoration', 'none');
						filter.basicDetails.buttonMode = false;
					}
					else if (reportType == BorhanReportType.CONTENT_DROPOFF) {
						filter.dropoff.setStyle('textDecoration', 'none');
						filter.dropoff.buttonMode = false;
					}
					else if (reportType == BorhanReportType.CONTENT_INTERACTIONS) {
						filter.interactions.setStyle('textDecoration', 'none');
						filter.interactions.buttonMode = false;
					}
				}
			}


			/**
			 * populate screen with the new data
			 * */
			protected function onReportDataChange(rdtc:ReportData):void {
				if (rdtc && this.visible) {
					lineLegend.visible = false;
					if (showLineChart) {
						// if linechart requested and only one day - we show barchart instead
						if ((_isMonths || _isOneDay) && reportType != BorhanReportType.LIVE) {
							// for live report we always want line chart, even if one day
							if (rdtc.type == BorhanReportType.PLATFORMS) {
								dateBarChart.yFields = rdtc.selectedChartHeaders;
							}
							else {
								dateBarChart.yFields = ["y"];
							}
							dateBarChart.dataProvider = rdtc.chartDp;
						}
						else {
							if (rdtc.type == BorhanReportType.PLATFORMS) {
								lineChart.yFields = rdtc.selectedChartHeaders;
								lineLegend.visible = true;
							}
							else {
								lineChart.yFields = ["y"];
								lineLegend.visible = false;
							}
							lineChart.dataProvider = rdtc.chartDp;
						}
					}
					else if (showColumnChart) {
						if (rdtc.type == BorhanReportType.OPERATION_SYSTEM 
							|| rdtc.type == BorhanReportType.BROWSERS
							|| rdtc.type == BorhanReportType.PLATFORMS) {
							columnChart.categoryField = "x"; 
						}
						columnChart.dataProvider = rdtc.chartDp;
					}

					if (showTable) {
						paging.totalCount = rdtc.totalCount;
						paging.currRowsInPage = rdtc.tableDp ? rdtc.tableDp.length : 0;
						paging.pageSize = rdtc.pager ? rdtc.pager.pageSize : paging.pageSize;
					}

					set3rdLvlSelection();

					if (ktable && showTable) {
						ktable.height = 295 + (paging.pageSize - 10) * TABLE_ROW_HEIGHT;
					}

				}
			}


			/**
			 * ask for needed reports
			 * */
			private function getReports(event:Event = null):void {
				handleTimeUnitChange();

				var reportSetDataEvent:ReportDataEvent = new ReportDataEvent(ReportDataEvent.SET_REPORT_DATA, reportType, screenType, label, aggregatedHeaders, tableHeaders, paging.pageSize);
				reportSetDataEvent.dispatch();

				var reportTotalEvent:ReportEvent = new ReportEvent(ReportEvent.GET_TOTAL, reportType, screenType);
				reportTotalEvent.dispatch();

				if (showTable) {
					getTable();
				}

				if (showLineChart || showColumnChart) {
					var reportGraphEvent:ReportEvent = new ReportEvent(ReportEvent.GET_GRAPH, reportType, screenType, '', true, true, true, true, false, addGraphTotals);
					reportGraphEvent.dispatch();
				}

				if (addGraphTotals || addTableTotals) {
					var reportBaseTotalsEvent:ReportEvent = new ReportEvent(ReportEvent.GET_BASE_TOTALS, reportType, screenType);
					reportBaseTotalsEvent.dispatch();
				}
			}


			/**
			 * ask for data for the displayed page
			 * */
			private function onPageChange():void {
				var pageEvent:PageEvent = new PageEvent(PageEvent.PAGE_CHANGE, paging.selectedPage, paging.pageSize, reportType);
				pageEvent.dispatch();

				getTable();
			}



			/**
			 * add BDP to the stage
			 * */
			private function addBDP():void {
				if (!bdp) {
					bdp = new SWFLoader();
					bdp.width = 350;
					bdp.height = 292.6;
					bdp.loaderContext = new LoaderContext(false, new ApplicationDomain(), SecurityDomain.currentDomain);
					bdp.addEventListener(Event.INIT, onBDP3Loaded);
					var bdpUrl:String = bdpParams.protocol + bdpParams.rootUrl + "/index.php/bwidget/wid/_" + bdpParams.partnerId + "/uiconf_id/" + _model.bdpUiConf + "/nowrapper/1/";
					bdp.source = bdpUrl;
					bdp.scaleContent = false;
					bdpSection.addChildAt(bdp, 0);
				}
				else if (!bdpSection.contains(bdp)) {
					bdpSection.addChildAt(bdp, 0);
					bdp.content["sendNotification"]('changeMedia', {entryId: reportData.selectedMediaEntry.id});
				}
				else {
					bdp.content["sendNotification"]('changeMedia', {entryId: reportData.selectedMediaEntry.id});
				}
			}


			/**
			 * show player.
			 * */
			private function showBdp(event:Event):void {
				//we hide it as a workaround to hide the old loaded entry
				bdp.visible = true;
			}


			/**
			 * Bdp loaded
			 */
			private function onBDP3Loaded(event:Event):void {
				bdp.content.addEventListener("bdpReady", showBdp);
				bdp.content.addEventListener("entryReady", showBdp);

				var params:Object = new Object();
				params.cdnHost = bdpParams.cdnHost;
				params.host = bdpParams.hostName;
				params.autoPlay = "false";
				params.loop = "false";
				params.autoRewind = "false";
				params.sourceType = "entryId";
				params.partnerId = bdpParams.partnerId;
				params.widgetId = "_" + bdpParams.partnerId;
				params.subpId = bdpParams.subpId;
				params.uiConfId = _model.bdpUiConf;
				params.ks = bdpParams.ks;
				params.entryId = reportData.selectedMediaEntry.id;
				params.allowCookies = true;

				if (bdpParams.debugMode)
					params.debugMode = "true";

				// set flashvars
				event.target.content["flashvars"] = params;

				// start the loading sqeunce of the bdp 
				event.target.content["init"]();
			}


			/**
			 * dispatch help event for the BMC.
			 * */
			private function help():void {
				dispatchEvent(new BmcHelpEvent(BmcHelpEvent.HELP, helpUrl));
			}


			/**
			 * open entry preview
			 * */
			protected function searchNote_linkHandler(event:TextEvent):void {
				pew = new PreviewEntryWin();
				pew.context = _model.context;
				pew.uiconfId = _model.bdpUiConf;
				pew.entry = _model.selectedReportData.selectedMediaEntry;

				PopUpManager.addPopUp(pew, this, true);
				PopUpManager.centerPopUp(pew);
				JSGate.maskHeader(false);
			}


			private function exportToCsv(event:MouseEvent):void {
				var reportEvent:ReportEvent = new ReportEvent(ReportEvent.EXPORT_TO_EXCEL, reportType);
				reportEvent.dispatch();
			}


			private function getTable():void {
				var reportTableEvent:ReportEvent = new ReportEvent(ReportEvent.GET_TABLE, reportType, screenType, ktable.orderBy, true, true, true, false, addTableTotals);
				reportTableEvent.dispatch();
			}
		]]>
	</mx:Script>

	<mx:Metadata>
		[Event(name="drillDown",type="flash.events.Event")]
	</mx:Metadata>

	<!-- breadcrumps -->
	<mx:HBox width="100%" horizontalGap="0" visible="{isDrillDown}" includeInLayout="{isDrillDown}">
		<mx:LinkButton label="{this.label}" buttonMode="true"
					   click="{(new StateEvent( StateEvent.STATE_CHANGE, backScreenType )).dispatch(); }"/>
		<mx:Label id="drillDownArrow" text=">>" paddingTop="2"/>
		<mx:Label id="drillDownObjectName" paddingTop="2" text="{_model.drillDownName}"/>
	</mx:HBox>

	<!-- report title -->
	<mx:HBox width="100%">
		<mx:Label id="reportTitle" text="{this.label}" styleName="pageTitle2"/>
	</mx:HBox>

	<mx:Spacer height="5"/>

	<!-- report filter -->
	<view:Filter id="filter" width="100%" isLoading="{_isLoading}" filterVo="{filterVo}"
				 applicationsList="{_model.applicationsList}" drillDownName="{_model.drillDownName}"
				 playbackContextFlag="{playbackContextFlag}" filterUsersFlag="{showUsersFilter}"
				 filterApplicationsFlag="{showApplicationsFilter}" dateOnlyFlag="{dateOnlyFlag}"
				 showTimeUnits="{showTimeUnits}" showSearchFilter="{showSearchFilter}"
				 showDrillDownNav="{showDrillDownNav}" drilldownSubjectId="{reportData.objectIds}" kc="{_model.kc}"
				 dateRangeManager="{dateRanger}" apply="{getReports(event)}"/>

	<mx:Spacer height="5"/>
	<mx:HRule width="100%"/>
	<mx:Spacer height="5"/>

	<!-- graph dimension -->
	<mx:HBox width="100%">
		<view:DimComboBox id="dimCb" width="310" dataProvider="{dimCbDp}" visible="{showDimension}"
						  includeInLayout="{showDimension}" enabled="{!_isLoading}"/>
		<mx:Spacer width="100%"/>
		<mx:Label visible="{_model.processingCSVFlag}" includeInLayout="{_model.processingCSVFlag}"
				  text="{resourceManager.getString('analytics','csvProcessing')}"/>
		<mx:LinkButton label="{resourceManager.getString('analytics','exportToExcel')}" click="exportToCsv(event)"
					   visible="{!_model.processingCSVFlag}" includeInLayout="{!_model.processingCSVFlag}"
					   enabled="{!_isLoading}"/>
	</mx:HBox>

	<!-- charts -->
	<charts:KColumnChart id="columnChart" width="100%" enabled="{_isVisibleColumnChart}" visible="{showColumnChart}"
						 includeInLayout="{showColumnChart}" />

	<mx:Canvas width="100%">
		<charts:KLineChart id="lineChart" width="100%" enabled="{_isVisibleLineChart}" showHours="{showGraphHours}"
						   includeInLayout="{showLineChart &amp;&amp; (!(_isOneDay || _isMonths) || reportType == BorhanReportType.LIVE)}"
						   visible="{showLineChart &amp;&amp; (!(_isOneDay || _isMonths) || reportType == BorhanReportType.LIVE)}" 
						   minHAxisDate="{filterVo.fromDate}" maxHAxisDate="{filterVo.toDate}"/>
		<mx:Legend id="lineLegend" dataProvider="{lineChart}" right="{lineLegend.width - 10}" 
				   styleName="analyticsGraphLegend"/>
	</mx:Canvas>

	<mx:Canvas width="100%">
		<charts:KDateColumnChart id="dateBarChart" width="100%"
								 oneDayDate="{_isOneDay &amp;&amp; ! _isMonths ? filterVo.fromDate : null}"
								 includeInLayout="{showLineChart &amp;&amp; (_isOneDay || _isMonths) &amp;&amp; reportType != BorhanReportType.LIVE}"
								 visible="{showLineChart &amp;&amp; (_isOneDay || _isMonths) &amp;&amp; reportType != BorhanReportType.LIVE}"/>
		<mx:Legend id="barLegend" dataProvider="{dateBarChart}" right="{barLegend.width - 10}" 
				   visible="{dateBarChart.visible}" styleName="analyticsGraphLegend" />
	</mx:Canvas>
	
	<!-- loader -->
	<mx:VBox width="{this.width-150}" height="200" paddingTop="-150" horizontalAlign="center" clipContent="false"
			 includeInLayout="false" visible="{_loadChart}">
		<mx:SWFLoader source="@Embed(source='assets/loader.swf', symbol='MyLoader')"/>
	</mx:VBox>

	<mx:Spacer height="10"/>
	<mx:HBox width="100%">
		<mx:Text id="searchNote" htmlText="{reportData.message}" link="searchNote_linkHandler(event)"
				 styleName="pageTitle2"/>
		<mx:Button styleName="toolTipHelp" visible="{messageTip != '' &amp;&amp; reportData.message != null}"
				   includeInLayout="{messageTip != '' &amp;&amp; reportData.message != null}" toolTip="{messageTip}"/>
	</mx:HBox>
	<mx:Label width="100%" styleName="pageTitle3" text="{reportData.filterMessage}"
			  includeInLayout="{reportData.filterMessage != ''}"/>
	<mx:Spacer height="10"/>

	<!-- totals -->
	<mx:Label text="{resourceManager.getString('analytics', 'totalsTitle')}" styleName="pageTitle2"/>
	<aggregateBar:AggregateBar id="aggregateBar" width="100%" headerDataProvider="{aggregatedHeaders}"
							   enabled="{!_loadTotal}" dataProvider="{reportData.aggregatedData}"/>

	<!-- loader -->
	<mx:VBox width="{this.width-150}" paddingTop="-35" horizontalAlign="center" visible="{_loadTotal}"
			 includeInLayout="false" clipContent="false">
		<mx:SWFLoader source="@Embed(source='assets/loader.swf', symbol='MyLoader')"/>
	</mx:VBox>
	<mx:Spacer height="5"/>


	<mx:HBox id="bdpSection" width="100%" enabled="{_isVisibleEntry}" visible="{showBDP}" includeInLayout="{showBDP}">
		<view:EntryDetails height="292.6" width="100%" styleName="blueBox" data="{reportData.selectedMediaEntry}"/>
	</mx:HBox>

	<!-- table -->
	<mx:Label text="{resourceManager.getString('analytics', 'tableTitle')}" styleName="pageTitle2"
			  includeInLayout="{showTable}" visible="{showTable}"/>
	<view:KTable id="ktable" width="100%" height="295" rowHeight="{TABLE_ROW_HEIGHT}" orderBy="{tableOrderBy}"
				 supportDrillDown="{_model.tableSupportDrillDown}" nonSortableHeaders="{tableNonSortableHeaders}"
				 includeInLayout="{showTable}" visible="{showTable}" headerDataProvider="{tableHeaders}"
				 reportType="{reportType}" reportData="{reportData}" orderByChanged="getTable()"/>

	<!-- paging -->
	<controls:Paging id="paging" width="100%" visible="{showTable &amp;&amp; ! disablePager}"
					 includeInLayout="{showTable &amp;&amp; ! disablePager}" rowsInPageChange="onPageChange()"
					 nextPage="onPageChange()" prvPage="onPageChange()" getPageNum="onPageChange()"
					 showRowsInPage="true" totalCount="{reportData.totalCount}"
					 currRowsInPage="{reportData.tableDp ? reportData.tableDp.length : 0}"
					 selectedPage="{reportData.pager.pageIndex}"/>

	<mx:VBox width="{this.width-150}" paddingTop="-130" horizontalAlign="center" includeInLayout="false"
			 visible="{_loadEntry}" clipContent="false">
		<mx:SWFLoader source="@Embed(source='assets/loader.swf', symbol='MyLoader')"/>
	</mx:VBox>
	<mx:VBox width="{this.width-150}" paddingTop="-130" horizontalAlign="center" includeInLayout="false"
			 visible="{_loadTable}" clipContent="false">
		<mx:SWFLoader source="@Embed(source='assets/loader.swf', symbol='MyLoader')"/>
	</mx:VBox>

</mx:VBox>
