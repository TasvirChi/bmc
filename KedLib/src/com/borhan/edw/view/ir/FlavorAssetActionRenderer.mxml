<?xml version="1.0" encoding="utf-8"?>
<ir:FlavorAssetRendererBase xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
								   horizontalAlign="center" verticalAlign="middle"
								   xmlns:renderers="com.borhan.bmc.modules.content.view.window.entrydetails.renderers.*" 
								   xmlns:ir="com.borhan.edw.view.ir.*">

	<mx:Script>
		<![CDATA[
			import com.borhan.vo.BorhanWidevineFlavorAsset;
			import com.borhan.analytics.GoogleAnalyticsConsts;
			import com.borhan.analytics.GoogleAnalyticsTracker;
			import com.borhan.edw.view.FlavorsTable;
			import com.borhan.edw.vo.FlavorAssetWithParamsVO;
			import com.borhan.types.BorhanFlavorAssetStatus;
			
			import mx.controls.Button;

			private const SpinnerImg:* = StyleManager.getStyleDeclaration(".imageBank").getStyle("SpinnerImg");

			[ArrayElementType("String")]
			/**
			 * actions in the combobox
			 * */
			private var _actionArr:Array = [];

			
			static public var allowUpload:Boolean = true;
			static public var allowMatch:Boolean = true;
			static public var allowLink:Boolean = true;
			static public var allowImport:Boolean = true;
			

			/**
			 * add the "upload" action to the actions list
			 * */
			private var _allowUpload:Boolean = allowUpload;

			/**
			 * add the "drop folder" action to the actions list
			 * */
			private var _allowMatch:Boolean = allowMatch;

			/**
			 * add the "link" action to the actions list
			 * */
			private var _allowLink:Boolean = allowLink;

			/**
			 * add the "import" action to the actions list
			 * */
			private var _allowImport:Boolean = allowImport;


			[Bindable]
			/**
			 * show the "preview" button
			 * */
			private var _showPreviewBtn:Boolean = false;

			/**
			 * current data object
			 * */
			private var _flavorWithParams:FlavorAssetWithParamsVO


			override public function set data(value:Object):void {
				super.data = value;
				_flavorWithParams = value as FlavorAssetWithParamsVO;
				setActions();
			}


			override public function validateNow():void {
				setActions();
				super.validateNow();
			}


			private function setActions():void {
				_actionArr = new Array();
				if (_flavorWithParams.borhanFlavorAssetWithParams.flavorAsset == null) {
					// no asset, only params
					if (_flavorWithParams.hasOriginal) {
						this.currentState = null;
						_actionArr.push(resourceManager.getString('cms', 'convertActionLabel'));
						addIngestionOptions();
					}
					else if (_allowUpload || _allowMatch || _allowLink || _allowImport) {
						this.currentState = null;
						addIngestionOptions();
					}
					else {
						this.currentState = "emptyState";
					}
				}
				else {
					if (_flavorWithParams.borhanFlavorAssetWithParams.flavorAsset.isOriginal) {
						// source flavor asset
						var status:int = _flavorWithParams.borhanFlavorAssetWithParams.flavorAsset.status;
						if ((status == BorhanFlavorAssetStatus.CONVERTING)
							|| (status == BorhanFlavorAssetStatus.WAIT_FOR_CONVERT)
							|| (status == BorhanFlavorAssetStatus.QUEUED)
							|| (status == BorhanFlavorAssetStatus.IMPORTING)
							|| (status == BorhanFlavorAssetStatus.VALIDATING)) {
							this.currentState = "convertingState";
						}
						else {
							this.currentState = null;
							_actionArr.push(resourceManager.getString('cms', 'deleteActionLabel'));
							_actionArr.push(resourceManager.getString('cms', 'downloadActionLabel'));
							addIngestionOptions();
							if (_flavorWithParams.borhanFlavorAssetWithParams.flavorAsset.isWeb) {
								_actionArr.push(resourceManager.getString('cms', 'previewActionLabel'));
								_showPreviewBtn = true;
							}
						}
					}
					else {
						switch (_flavorWithParams.borhanFlavorAssetWithParams.flavorAsset.status) {
							case BorhanFlavorAssetStatus.CONVERTING:
							case BorhanFlavorAssetStatus.WAIT_FOR_CONVERT:
							case BorhanFlavorAssetStatus.QUEUED:
							case BorhanFlavorAssetStatus.IMPORTING:
							case BorhanFlavorAssetStatus.VALIDATING:  {
								this.currentState = "convertingState";
								break;
							}
							case BorhanFlavorAssetStatus.DELETED:  {
								if (_flavorWithParams.hasOriginal) {
									this.currentState = null;
									_actionArr.push(resourceManager.getString('cms', 'convertActionLabel'));
									addIngestionOptions();
								}
								else if (_allowUpload || _allowMatch || _allowLink || _allowImport) {
									this.currentState = null;
									addIngestionOptions();
								}
								else {
									this.currentState = "emptyState";
								}
								break;
							}
							case BorhanFlavorAssetStatus.ERROR:
							case BorhanFlavorAssetStatus.NOT_APPLICABLE:  {
								if (_flavorWithParams.hasOriginal) {
									this.currentState = null;
									_actionArr.push(resourceManager.getString('cms', 'reconvertActionLabel'));
									addIngestionOptions();
								}
								else if (_allowUpload || _allowMatch || _allowLink || _allowImport) {
									this.currentState = null;
									addIngestionOptions();
								}
								else {
									this.currentState = "emptyState";
								}
								break;
							}

							case BorhanFlavorAssetStatus.EXPORTING:  
							case BorhanFlavorAssetStatus.READY:  {
								this.currentState = null;
								_actionArr.push(resourceManager.getString('cms', 'deleteActionLabel'));
								_actionArr.push(resourceManager.getString('cms', 'downloadActionLabel'));
								addIngestionOptions();
								if (_flavorWithParams.borhanFlavorAssetWithParams.flavorAsset.isWeb) {
									_actionArr.push(resourceManager.getString('cms', 'previewActionLabel'));
									_showPreviewBtn = true;
								}
								if (_flavorWithParams.hasOriginal) {
									_actionArr.push(resourceManager.getString('cms', 'reconvertActionLabel'));
								}
								if (_flavorWithParams.borhanFlavorAssetWithParams.flavorAsset is BorhanWidevineFlavorAsset) {
									_actionArr.push(resourceManager.getString('cms', 'wvDetailsActionLabel'));
								}
								
								break;
							}
						}
					}
				}
				if (actionCombobox) {
					actionCombobox.dataProvider = _actionArr;
					//workaround for a flex bug - dropdown didn't show correct data
					if (actionCombobox.dropdown)
						actionCombobox.dropdown.dataProvider = _actionArr;
				}
			}


			/**
			 * adds the ingestion options to actionArr, according to permissions
			 * */
			private function addIngestionOptions():void {
				if (_allowUpload)
					_actionArr.push(resourceManager.getString('cms', 'uploadActionLabel'));
				if (_allowMatch)
					_actionArr.push(resourceManager.getString('cms', 'matchActionLabel'));
				if (_allowLink)
					_actionArr.push(resourceManager.getString('cms', 'linkActionLabel'));
				if (_allowImport)
					_actionArr.push(resourceManager.getString('cms', 'importActionLabel'));
			}


			private function launchAction(actionName:String):void {
				var gaEvent:String;
				switch (actionName) {
					case resourceManager.getString('cms', 'previewActionLabel'):  
						dispatchEvent(new Event(FlavorsTable.PREVIEW_FLAVOR, true));
						gaEvent = GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVOR_PREVIEW;
						break;
					
					case resourceManager.getString('cms', 'downloadActionLabel'): 
						dispatchEvent(new Event(FlavorsTable.DOWNLOAD_FLAVOR, true));
						gaEvent = GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVOR_DNLD;
						break;
					
					case resourceManager.getString('cms', 'deleteActionLabel'):  
						dispatchEvent(new Event(FlavorsTable.DELETE_FLAVOR, true));
						gaEvent = GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVOR_DELETE;
						break;
					
					case resourceManager.getString('cms', 'reconvertActionLabel'):
					case resourceManager.getString('cms', 'convertActionLabel'):  
						dispatchEvent(new Event(FlavorsTable.CONVERT_FLAVOR, true));
						gaEvent = GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVOR_CONVERT;
						break;
					
					case resourceManager.getString('cms', 'uploadActionLabel'):
						dispatchEvent(new Event(FlavorsTable.UPLOAD_FLAVOR, true));
						gaEvent = GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVOR_UPLOAD;
						break;
					
					case resourceManager.getString('cms', 'matchActionLabel'):
						dispatchEvent(new Event(FlavorsTable.MATCH_FLAVOR, true));
						gaEvent = GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVOR_MATCH;
						break;
					
					case resourceManager.getString('cms', 'linkActionLabel'):
						dispatchEvent(new Event(FlavorsTable.LINK_FLAVOR, true));
						gaEvent = GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVOR_LINK;
						break;
					
					case resourceManager.getString('cms', 'importActionLabel'):
						dispatchEvent(new Event(FlavorsTable.IMPORT_FLAVOR, true));
						gaEvent = GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVOR_IMPORT;
						break;
					
					case resourceManager.getString('cms', 'wvDetailsActionLabel'):
						dispatchEvent(new Event(FlavorsTable.WV_FLAVOR_DETAILS, true));
						gaEvent = GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVOR_WV_DETAILS;
						break;
					
				}
				if (gaEvent) {
					GoogleAnalyticsTracker.getInstance().sendToGA(gaEvent);
				}
			}


			private function onOneActionClick(event:Event):void {
				var btn:Button = event.target as Button;
				launchAction(btn.label);
			}


			private function onActionChange(event:Event):void {
				var cb:ComboBox = event.target as ComboBox;
				var sl:String = cb.selectedLabel;
				cb.selectedIndex = -1;
				launchAction(sl);
			}
		]]>
	</mx:Script>
	<ir:states>
		<mx:State name="convertingState">
			<mx:RemoveChild target="{actionCombobox}"/>
			<mx:AddChild position="lastChild">
				<mx:Image height="90%" toolTip="{resourceManager.getString('cms','convertingToolTip')}"
						  source="{SpinnerImg}"/>
				<!-- SpinnerImg comes from the skin fla -->
			</mx:AddChild>
		</mx:State>
		<mx:State name="emptyState">
			<mx:RemoveChild target="{actionCombobox}"/>
		</mx:State>
	</ir:states>

	<mx:ComboBox id="actionCombobox" editable="false" fontSize="10" width="110" buttonMode="true"
				 change="onActionChange(event)" styleName="dataGridComboBox"
				 prompt="{resourceManager.getString('cms','selectActionLabel')}">
	</mx:ComboBox>
</ir:FlavorAssetRendererBase>
